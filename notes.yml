Core Features:
  - Bot creation and management.
  - Hook creation and management.
  - NLP (prebuilt apis) for chat-message to hook recognition.
  - Action hook definition and triggering.
  - [consider] Realtime Chatbox : Amplizard would stream the complex queries to that chatbox, where customer service would be able to act on that query.

TODO:
  - FRONTEND:
    - [x] Add alert messages for http requests on the frontend (sucesss / error alerts).
    - [x] Make the theme match on all the pages.
    - [x] Image upload in the chat feature.
    - [x] Provide the ui through cdn or something, so that businesses can embed the chatbot ui or frontend.
    - [x] Add loading spinner to buttons.
    - [x] show chat expired content when chat is expired.
    - [x] Write integration documentation.
    - [x] Add a back button.
    - [ ] Field for direct query repsonses, user should be able to choose whether to call api or send direct response. There should be an option to choose if the response should be rephrased by ai or not.

  - BACKEND:
    - [x] Hooks data should only be fed once to the model, when a new chatSession is started.
    - [x] Create newChat route so that businesses will first call that api then the chat api, so that its easy to manage the state of chat and model.
    - [x] Bot name should be used as the model name.
    - [x] Chat expiry feature, when inactive for too long, when 3 inappropriate or unrelated things, When query resolved.
    - [x] For apis, migrate from responding with html to responding with json.
    - [ ] Save the chat history in database with id and save it in the format of chatSession content.
    - [ ] Write tests.
    - [ ] Fine tune the model.
    - [ ] Optimize system instruction and context.
    - [ ] Make chat closing more dynamic, move from direct closeChat function calling approach to incrementing inappropriate message / input counter and calling the closeChat function manually when it goes beyond the limit.
    - [x] Feature to have direct responses for queries, no hook calling, just the response. 
    - [ ] Fix the annoying bug, form submit button not enabling upon switching a radio button / switch, or just remove the disabling feature.
    - [ ] Currently we are passing hookData and knowledge base to each instance of the Model Class, check if that causes a problem, since all the model instances associated with a bot would have the same knowledge and hookData.
    - [ ] Move system instruction and prompting to history approach, provide example hooks and real hooks, that approach would be easy and might work.

  - OVERALL:
    - [x] Businesses will request our server /chat endpoint with post method and start the chat. They will be having two options to get the data, as a stream or as a compleete response using direct post request or event stream.
    - [x] Business should be only able to interact with the chatbot only if they have a valid api key. Add verification to chat route.
    - [x] Create a multi stage build, to only have build in the production and dev dependenices in the development container.
    - [x] Limit input tokens.
    - [x] Image upload feature, ai should be able to analyze it. Create Function trigger. This functionality should work based on what the model figures out, if the model wants the customer to send a video or a picture, then the function related to it should be triggered.
    - [x] Create functionality for ui embedding.
    - [x] Functionality to handle bot url.
    - [x] Figure out how to use the image analysis function, in function calling or to send response to model as default chat.
    - [x] Fix the error for ai function 'sendImageForAnalysis' not triggering, if nothing works, try changing it to a hook.
    - [x] Add integration code on frontend for businesses.
    - [ ] Run promises that are not awaited / handled as background functions, to handle them correctly and log errors .
    - [ ] Test whole functionality.
    - [ ] Businesses should be able to choose how to trigger hooks, like if they want to trigger the public api, or receiving event using websocket and writing custom code or triggering internal api using a tool on their backend.
    - [ ] Chatbot should figure out the recent behaviour of user and when he comes the next time, it should show up some buttons to do action. Like cancel_order or something.
    - [ ] Ratelimit system for each api / ai model to handle 1 request per second and 15 requests / min.

  - UPCOMING:
    - [ ] Optimise model system instruction.
    - [ ] Monitoring chatbot errors and logging them on a separate logger.
    - [ ] Build Data streaming pipeline (customer with chatbot convo) for businesses.
    - [ ] Ratelimiting.

    - DASHBOARD (this includes both for our system and our target customers(businesses)):
      - [ ] Chat volume: Total number of chats initiated (Daily, Monthly).
      - [ ] Chat resolution rate: Percentage of chats resolved by the chatbot without human intervention.
      - [ ] Average chat duration: Average time spent in a chat.
      - [ ] Customer satisfaction: Feedback scores or ratings from customers.
      - [ ] Abandoned chats: Number of chats left unresolved.
      - [ ] Hook trigger frequency: How often different hooks are triggered, No of hooks triggered.
      - [ ] Hook accuracy: How well the chatbot identifies and triggers correct hooks.
      - [ ] False positive rate: Incorrect hook triggers.
      - [ ] False negative rate: Missed opportunities to trigger hooks.
      - [ ] Average response time: Time taken by the chatbot to respond to user queries.
      - [ ] Error rate: Percentage of errors encountered by the chatbot.
      - [ ] Visualizations: Use charts and graphs to present data effectively.
      - [ ] Api usage.

      - Additional:
        - Customizable filters: Allow users to filter data by date, time, or other parameters.
        - Export capabilities: Enable users to export data for further analysis.
