#docker system prune -a --volumes #cmd to remove everything

services:
  production_app:
    #container_name: amplizard_app
    build: 
      context: .
      target: production
    ports:
      - "80:80"
      - "9090:9090"
    depends_on:
      - redis
      - postgres
    env_file: ".env" #comment out this line if you want to provide env vars directly, and use the env vars given below.
    environment:
      - NODE_ENV=production


    #environment:
      #- NODE_ENV=production
      #- host=0.0.0.0
      #- port=9090
      #- POSTGRES_HOST=postgres
      #- POSTGRES_USER=postgres
      #- POSTGRES_DB=agentZ
      #- POSTGRES_PORT=5432
      #- POSTGRES_PASSWORD=postgres
      #- redis_url=redis://redis:6379
    
    networks:
      - amplizard_net

    restart: always

      #command: sh -c "cd /app && npm install && npm run build && cp dist/config.sample.js dist/config.js && npm start"

  redis:
    container_name: redis
    image: redis:alpine
    volumes:
      - redis_data:/data
    #ports:
      #- "6379:6379"
    networks:
      - amplizard_net

    restart: always

  postgres:
    container_name: amplizard_db
    image: postgres:alpine
    env_file: ".env" #comment out this line if you want to provide env vars directly, and use the env vars given below.
    #environment:
      #- POSTGRES_USER=postgres
      #- POSTGRES_DB=amplizard
      #- POSTGRES_PASSWORD=postgres

    #ports: #commented out, since using docker network bridge
      #- "5432:5432"

    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - amplizard_net

    restart: always

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: /mnt/postgres_data/pgdata
      o: bind
  redis_data:
    driver: local
    driver_opts:
      type: none
      device: /mnt/redis_data/redis_data
      o: bind

networks:
  amplizard_net:
    driver: bridge
